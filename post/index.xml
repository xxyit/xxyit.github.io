<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 大熊的博客</title>
    <link>https://www.ggood.xyz/post/</link>
    <description>Recent content in Posts on 大熊的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 01 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.ggood.xyz/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python中所使用的while、for循环</title>
      <link>https://www.ggood.xyz/post/python%E4%B8%AD%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84whilefor%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/python%E4%B8%AD%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84whilefor%E5%BE%AA%E7%8E%AF/</guid>
      <description>##while循环语句
while 判断条件(condition)：  执行语句(statements)…… 当执行到while语句会判断其设定的条件，符合就会进入循环，直到判断其不符合才进入下一步程序。
##for循环语句 for 循环可以遍历任何可迭代对象，如一个列表或者一个字符串。
for循环的一般格式如下：
for &amp;lt;variable&amp;gt; in &amp;lt;sequence&amp;gt;:  &amp;lt;statements&amp;gt; else:  &amp;lt;statements&amp;gt; 执行for循环，会遍历中的内容，直至完成结束
&amp;gt;&amp;gt;&amp;gt;languages = [&amp;#34;C&amp;#34;, &amp;#34;C++&amp;#34;, &amp;#34;Perl&amp;#34;, &amp;#34;Python&amp;#34;] &amp;gt;&amp;gt;&amp;gt; for x in languages: ... print (x) ... C C++ Perl Python &amp;gt;&amp;gt;&amp;gt; </description>
    </item>
    
    <item>
      <title>Python的if else判断以及continue、break用法</title>
      <link>https://www.ggood.xyz/post/python%E7%9A%84if-else%E5%88%A4%E6%96%AD%E4%BB%A5%E5%8F%8Acontinuebreak%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/python%E7%9A%84if-else%E5%88%A4%E6%96%AD%E4%BB%A5%E5%8F%8Acontinuebreak%E7%94%A8%E6%B3%95/</guid>
      <description>##if else语句 语句的意思是如果满足此条件则执行，否则执行另一个
 if (condition) {  当条件为 true 时执行的代码 } else {  当条件不为 true 时执行的代码 } 可嵌套使用，可以结合while、for循环使用
sites = [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;D&amp;#34;] for site in sites:  if site == &amp;#34;B&amp;#34;:  print(&amp;#34;B!&amp;#34;)  break  print(&amp;#34;循环数据 &amp;#34; + site) else:  print(&amp;#34;没有循环数据!&amp;#34;) print(&amp;#34;完成循环!&amp;#34;) ##continue、break用法 break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。
continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。
n = 5 while n &amp;gt; 0:  n -= 1  if n == 2:  break  print(n) print(&amp;#39;循环结束。&amp;#39;)  输出结果为：  4 3 循环结束。 n = 5 while n &amp;gt; 0:  n -= 1  if n == 2:  continue  print(n) print(&amp;#39;循环结束。&amp;#39;)   输出结果为：  4 3 1 0 循环结束。 </description>
    </item>
    
    <item>
      <title>前端的HTML的结构认识</title>
      <link>https://www.ggood.xyz/post/%E5%89%8D%E7%AB%AF%E7%9A%84html%E7%9A%84%E7%BB%93%E6%9E%84%E8%AE%A4%E8%AF%86/</link>
      <pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/%E5%89%8D%E7%AB%AF%E7%9A%84html%E7%9A%84%E7%BB%93%E6%9E%84%E8%AE%A4%E8%AF%86/</guid>
      <description>HTML主要结构 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;!--这里主要是声名HTML的类型--&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;!--从这里开始包含HTML页面内容--&amp;gt;  &amp;lt;head&amp;gt; &amp;lt;!--头部结构，里面可以有title、meta、link等内容--&amp;gt;  &amp;lt;/head&amp;gt; &amp;lt;!--闭环head--&amp;gt;  &amp;lt;body&amp;gt; &amp;lt;!--主体，以下内容就是浏览器页面显示的东西--&amp;gt;  &amp;lt;/body&amp;gt; &amp;lt;!--闭环head--&amp;gt; &amp;lt;/html&amp;gt; &amp;lt;!--闭环HTML--&amp;gt; HTML基本上都是以层级嵌套的形式编写内容，每个标签都会有相应的开始结束头尾对应</description>
    </item>
    
    <item>
      <title>1A2B猜数字游戏功能</title>
      <link>https://www.ggood.xyz/post/1a2b/</link>
      <pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/1a2b/</guid>
      <description>import randomimport argparseimport retotal=&amp;#39;0123456789&amp;#39;#全部数值parser = argparse.ArgumentParser(description=&amp;#39;Set Answer&amp;#39;)parser.add_argument(&amp;#39;--mysetguess&amp;#39;, dest=&amp;#39;mysetguess&amp;#39;, type=str, help= &amp;#34;游戏者自己设定的答案&amp;#34;, required=False,choices=set(4))args = parser.parse_args()print(args.mysetguess)print(&amp;#34;/*******************************猜数字游戏***********************************/&amp;#34;)print(&amp;#34;游戏规则：系统随机给出0-9的4位数字，您可以输入您猜测的4位数字，系统会比较并给予反馈，A表示数字对，且位置对，B表示数字对位置不对，如1A2B表示有1位您猜对了数字和位置，有2位您猜对数字，但位置不对。您总共有6次机会，加油哦！&amp;#34;)if args.mysetguess==None:answer = random.sample(total, 4)# 从total中随机获取4个不重复数else:answer = args.mysetguessfor guessTimes in range(6):#循环6次guess = &amp;#34;&amp;#34;for inputErros in range(3):#循环3次guess=input(&amp;#34;请输入4位0-9的不重复数字：&amp;#34;)if guess.isdigit()==True and len(guess)==4:#isdigit() 方法检测字符串是否只由数字组成且长度为4guessSet=set(guess)#set() 函数创建一个无序不重复元素集if len(guessSet)==4:##长度个数为4 and guessSet.isdisjoint(set()):#内容不与其他某个设置的值要不相交，相交falsebreakelse:print(&amp;#34;您没有理解游戏规则，错误次数3次，游戏结束。&amp;#34;)breakA=0B=0for j in range(4):if guess[j]==answer[j]:A+=1else:#for k in range(4):#if guess[j]==answer[k]:if guess[j] in answer:B+=1if A&amp;lt;4:if guessTimes&amp;lt;5:print(&amp;#34;%dA%dB，您还有%d次机会。&amp;#34; %(A,B,5-guessTimes))else:print(&amp;#34;很遗憾您没有猜对，答案是%s，再玩一局吧。&amp;#34; %(answer))else:print(&amp;#34;恭喜您猜对了！&amp;#34;)break </description>
    </item>
    
    <item>
      <title>Python 猜数字小功能</title>
      <link>https://www.ggood.xyz/post/%E7%AE%80%E7%AE%80%E5%8D%95%E5%8D%95%E7%9A%84%E4%B8%80%E4%B8%AA%E7%8C%9C%E6%95%B0%E5%AD%97%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/%E7%AE%80%E7%AE%80%E5%8D%95%E5%8D%95%E7%9A%84%E4%B8%80%E4%B8%AA%E7%8C%9C%E6%95%B0%E5%AD%97%E5%8A%9F%E8%83%BD/</guid>
      <description>里面主要涉及到while，for循环，if..else判断 代码如下:
 fage = False  mage =False  bage=False  father_age = 42  mather_age=41  boy_age=15  print(&amp;#34;Let&amp;#39;s guess the age!&amp;#34;)  while fage == False: #当fage这个值等于False时，进入循环  guess_father =int(input(&amp;#39;\nyour guess father_age:&amp;#39;)) #输入你所猜测的父亲年龄  if guess_father == father_age:  print(&amp;#39;you right!\n&amp;#39;)  fage = True  else:  print(&amp;#39;\nyour is error!&amp;#39;)  if guess_father &amp;lt; father_age:  small = father_age - guess_father #当你猜测的数比答案小时，用答案减去猜测数等于相差数值  print(&amp;#39;maybe is small!differ:&amp;#39;, small)  elif guess_father &amp;gt; father_age:  big =guess_father - father_age  print(&amp;#39;maybe is big!</description>
    </item>
    
    <item>
      <title>Python 爬取内容转存 TXT</title>
      <link>https://www.ggood.xyz/post/%E7%88%AC%E5%8F%96%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99%E5%86%85%E5%AE%B9%E8%BD%AC%E5%AD%98%E6%96%87%E6%9C%AC/</link>
      <pubDate>Sat, 26 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/%E7%88%AC%E5%8F%96%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99%E5%86%85%E5%AE%B9%E8%BD%AC%E5%AD%98%E6%96%87%E6%9C%AC/</guid>
      <description>需要安装好Python环境，以下基于Python3实现，Windows10环境： 所需Python的拓展库,需要用到selenium库对网页元素进行操作；安装chrome浏览器，下载并解压相对应版本的谷歌驱动：
 from selenium import webdriver  import time  from selenium.webdriver.common.by import By  import os  from selenium.webdriver.chrome.options import Options #安装chrome，下载解压Chromediver 以下是主体部分:
 env_dist = os.environ # environ是在os.py中定义的一个dict environ = {}  usdtxt=env_dist.get(&amp;#39;usd_hlfile_path&amp;#39;)#环境变量usd_hlfile_path，存放usd汇率的路径下txt文本  print (usdtxt)  rmbtxt=env_dist.get(&amp;#39;rmb_hlfile_path&amp;#39;)#环境变量rmb_hlfile_path，存放rmb汇率的路径下txt文本  print (rmbtxt)  chromedriver =env_dist.get(&amp;#39;chromedriver_path&amp;#39;)#环境变量chromedriver_path，存放谷歌驱动的路径  print(chromedriver)   chrome_options = Options()  chrome_options.add_argument(&amp;#39;--no-sandbox&amp;#39;)  chrome_options.add_argument(&amp;#39;--disable-dev-shm-usage&amp;#39;)  chrome_options.add_argument(&amp;#39;--headless&amp;#39;)  driver = webdriver.Chrome(options=chrome_options)   #driver=webdriver.Chrome(executable_path=chromedriver)  driver.maximize_window()  driver.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://www.ggood.xyz/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://www.ggood.xyz/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://www.ggood.xyz/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://www.ggood.xyz/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/▾ images/logo.png should become
▾ &amp;lt;root&amp;gt;/▾ static/▾ images/logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Test 5</title>
      <link>https://www.ggood.xyz/post/test-5/</link>
      <pubDate>Sun, 05 Jan 1012 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/test-5/</guid>
      <description>Test 5</description>
    </item>
    
    <item>
      <title>Test 4</title>
      <link>https://www.ggood.xyz/post/test-4/</link>
      <pubDate>Sat, 04 Jan 1012 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/test-4/</guid>
      <description>Test 4</description>
    </item>
    
    <item>
      <title>Test 3</title>
      <link>https://www.ggood.xyz/post/test-3/</link>
      <pubDate>Fri, 03 Jan 1012 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/test-3/</guid>
      <description>Test 3</description>
    </item>
    
    <item>
      <title>Test 2</title>
      <link>https://www.ggood.xyz/post/test-2/</link>
      <pubDate>Thu, 02 Jan 1012 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/test-2/</guid>
      <description>Test 2</description>
    </item>
    
    <item>
      <title>Test 1</title>
      <link>https://www.ggood.xyz/post/test-1/</link>
      <pubDate>Wed, 01 Jan 1012 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/test-1/</guid>
      <description>Test 1 I am referencing a footnote1
1package main 2 3import &amp;#34;fmt&amp;#34; 4 5func main() { 6 fmt.Println(&amp;#34;{linenos=inline}&amp;#34;) 7} 1 2 3 4 5 6 7  package main  import &amp;#34;fmt&amp;#34;  func main() {  fmt.Println(&amp;#34;{linenos=table}&amp;#34;) }   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis in dictum tortor.Morbi laoreet enim id sem euismod lobortis. Donec quam libero, bibendum non cursus vitae, dictum vel eros.   I am the footnote&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
  </channel>
</rss>
