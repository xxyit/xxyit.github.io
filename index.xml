<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>大熊的博客</title>
    <link>https://www.ggood.xyz/</link>
    <description>Recent content on 大熊的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 06 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.ggood.xyz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTML中基本的标签（5）</title>
      <link>https://www.ggood.xyz/post/html%E4%B8%AD%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A0%87%E7%AD%BE5/</link>
      <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/html%E4%B8%AD%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A0%87%E7%AD%BE5/</guid>
      <description>HTML列表 HTML 支持有序、无序和定义列表
无序列表 无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。
无序列表使用 &amp;lt;ul&amp;gt; 标签
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Coffee&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Milk&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 有序列表 有序列表也是一列项目，列表项目使用数字进行标记。 有序列表始于 &amp;lt;ol&amp;gt; 标签。每个列表项始于 &amp;lt;li&amp;gt; 标签。
列表项使用数字来标记。
&amp;lt;ol&amp;gt; &amp;lt;li&amp;gt;Coffee&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Milk&amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; 自定义列表 自定义列表不仅仅是一列项目，而是项目及其注释的组合。
自定义列表以 &amp;lt;dl&amp;gt; 标签开始。每个自定义列表项以 &amp;lt;dt&amp;gt; 开始。每个自定义列表项的定义以 &amp;lt;dd&amp;gt; 开始。
&amp;lt;dl&amp;gt; &amp;lt;dt&amp;gt;Coffee&amp;lt;/dt&amp;gt; &amp;lt;dd&amp;gt;- black hot drink&amp;lt;/dd&amp;gt; &amp;lt;dt&amp;gt;Milk&amp;lt;/dt&amp;gt; &amp;lt;dd&amp;gt;- white cold drink&amp;lt;/dd&amp;gt; &amp;lt;/dl&amp;gt; 提示: 列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。
ul是unordered lists的缩写 (无序列表)
li是list item的缩写 （列表项目）
ol是ordered lists的缩写（有序列表）
dl是definition lists的英文缩写 (自定义列表)
dt是definition term的缩写 (自定义列表组)
dd是definition description的缩写（自定义列表描述）
nl是navigation lists的英文缩写 （导航列表）
tr是table row的缩写 （表格中的一行）
th是table header cell的缩写 （表格中的表头）</description>
    </item>
    
    <item>
      <title>HTML中基本的标签（4）</title>
      <link>https://www.ggood.xyz/post/html%E4%B8%AD%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A0%87%E7%AD%BE4/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/html%E4%B8%AD%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A0%87%E7%AD%BE4/</guid>
      <description>HTML图像 在 HTML 中，图像由&amp;lt;img&amp;gt; 标签定义。
&amp;lt;img&amp;gt; 是空标签，意思是说，它只包含属性，并且没有闭合标签。
要在页面上显示图像，你需要使用源属性（src）。src 指 &amp;ldquo;source&amp;rdquo;。源属性的值是图像的 URL 地址。
&amp;lt;img src=&amp;#34;url&amp;#34; alt=&amp;#34;some_text&amp;#34;&amp;gt; URL 指存储图像的位置。如果名为 &amp;ldquo;abc.jpg&amp;rdquo; 的图像位于 www.baidu.com 的 images 目录中，那么其 URL 为 http://www.baidu.com/images/abc.jpg。
浏览器将图像显示在文档中图像标签出现的地方。如果你将图像标签置于两个段落之间，那么浏览器会首先显示第一个段落，然后显示图片，最后显示第二段。
alt 属性用来为图像定义一串预备的可替换的文本。
替换文本属性的值是自行定义的。
在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息。此时，浏览器将显示这个替代性的文本而不是图像。为页面上的图像都加上替换文本属性是个好习惯，这样有助于更好的显示信息，并且对于那些使用纯文本浏览器的人来说是非常有用的。
height（高度） 与 width（宽度）属性用于设置图像的高度与宽度。
属性值默认单位为像素
&amp;lt;img src=&amp;#34;abc.jpg&amp;#34; alt=&amp;#34;abc&amp;#34; width=&amp;#34;304&amp;#34; height=&amp;#34;228&amp;#34;&amp;gt; HTML表格 表格由 &amp;lt;table&amp;gt; 标签来定义。每个表格均有若干行（由 &amp;lt;tr&amp;gt; 标签定义），每行被分割为若干单元格（由 &amp;lt;td&amp;gt; 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。
&amp;lt;table border=&amp;#34;1&amp;#34;&amp;gt;  &amp;lt;tr&amp;gt;  &amp;lt;td&amp;gt;row 1, cell 1&amp;lt;/td&amp;gt;  &amp;lt;td&amp;gt;row 1, cell 2&amp;lt;/td&amp;gt;  &amp;lt;/tr&amp;gt;  &amp;lt;tr&amp;gt;  &amp;lt;td&amp;gt;row 2, cell 1&amp;lt;/td&amp;gt;  &amp;lt;td&amp;gt;row 2, cell 2&amp;lt;/td&amp;gt;  &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt; 表格的表头使用 &amp;lt;th&amp;gt; 标签进行定义。</description>
    </item>
    
    <item>
      <title>HTML中基本的标签（3）</title>
      <link>https://www.ggood.xyz/post/html%E4%B8%AD%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A0%87%E7%AD%BE3/</link>
      <pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/html%E4%B8%AD%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A0%87%E7%AD%BE3/</guid>
      <description>HTML标题 标题（Heading）是通过 &amp;lt;h1&amp;gt; - &amp;lt;h6&amp;gt; 标签进行定义的。
&amp;lt;h1&amp;gt; 定义最大的标题。 &amp;lt;h6&amp;gt; 定义最小的标题。
&amp;lt;h1&amp;gt;这是一个标题。&amp;lt;/h1&amp;gt; &amp;lt;h2&amp;gt;这是一个标题。&amp;lt;/h2&amp;gt; &amp;lt;h3&amp;gt;这是一个标题。&amp;lt;/h3&amp;gt; HTML注释 注释插入 HTML 代码中，这样可以提高其可读性，使代码更易被人理解。浏览器会忽略注释，也不会显示它们。
&amp;lt;!-- 这是一个注释 --&amp;gt; HTML链接 HTML使用标签&amp;lt;a&amp;gt;来设置超文本链接。
超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，您可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。
当您把鼠标指针移动到网页中的某个链接上时，箭头会变为一只小手。
在标签&amp;lt;a&amp;gt; 中使用了href属性来描述链接的地址。
&amp;lt;a href=&amp;#34;url&amp;#34;&amp;gt;链接文本&amp;lt;/a&amp;gt; 使用 target 属性，你可以定义被链接的文档在何处显示。
下面的这行会在新窗口打开文档
&amp;lt;a href=&amp;#34;https://www.baidu.com/&amp;#34; target=&amp;#34;_blank&amp;#34; rel=&amp;#34;noopener noreferrer&amp;#34;&amp;gt;访问百度!&amp;lt;/a&amp;gt; </description>
    </item>
    
    <item>
      <title>HTML中基本的标签（2）</title>
      <link>https://www.ggood.xyz/post/html%E4%B8%AD%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A0%87%E7%AD%BE2/</link>
      <pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/html%E4%B8%AD%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A0%87%E7%AD%BE2/</guid>
      <description>HTML头部中使用的主要标签 可以添加在头部区域的元素标签为: &amp;lt;title&amp;gt; , &amp;lt;style&amp;gt;, &amp;lt;meta&amp;gt;, &amp;lt;link&amp;gt;, &amp;lt;script&amp;gt;, &amp;lt;noscript&amp;gt; 和 &amp;lt;base&amp;gt;。
&amp;lt;title&amp;gt; &amp;lt;title&amp;gt; 标签定义了不同文档的标题
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;文档标题&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;base&amp;gt; &amp;lt;base&amp;gt; 标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接
&amp;lt;head&amp;gt; &amp;lt;base href=&amp;#34;http://www.baidu.com/&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;link&amp;gt; &amp;lt;link&amp;gt; 标签定义了文档与外部资源之间的关系。 &amp;lt;link&amp;gt; 标签通常用于链接到样式表
&amp;lt;head&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;mystyle.css&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;head&amp;gt; &amp;lt;link rel=&amp;#34;shortcut icon&amp;#34; href=&amp;#34;图片url&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;style&amp;gt; &amp;lt;style&amp;gt; 标签定义了HTML文档的样式文件引用地址 在&amp;lt;style&amp;gt; 元素中你也可以直接添加样式来渲染 HTML 文档
&amp;lt;head&amp;gt; &amp;lt;style type=&amp;#34;text/css&amp;#34;&amp;gt; body {background-color:yellow} p {color:blue} &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;meta&amp;gt; meta标签描述了一些基本的元数据。 &amp;lt;meta&amp;gt; 标签提供了元数据.元数据也不显示在页面上，但会被浏览器解析。
为搜索引擎定义关键词:  &amp;lt;meta name=&amp;#34;keywords&amp;#34; content=&amp;#34;HTML, CSS, XML, XHTML, JavaScript&amp;#34;&amp;gt; 为网页定义描述内容:  &amp;lt;meta name=&amp;#34;description&amp;#34; content=&amp;#34;需要描述的内容&amp;#34;&amp;gt; 定义网页作者:  &amp;lt;meta name=&amp;#34;author&amp;#34; content=&amp;#34;Jack&amp;#34;&amp;gt; 每30秒钟刷新当前页面:  &amp;lt;meta http-equiv=&amp;#34;refresh&amp;#34; content=&amp;#34;30&amp;#34;&amp;gt; &amp;lt;script&amp;gt; &amp;lt;script&amp;gt;标签用于加载脚本文件，如： JavaScript。</description>
    </item>
    
    <item>
      <title>HTML中基本的标签（1）</title>
      <link>https://www.ggood.xyz/post/html%E4%B8%AD%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A0%87%E7%AD%BE1/</link>
      <pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/html%E4%B8%AD%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A0%87%E7%AD%BE1/</guid>
      <description>头部 head 元素包含了所有的头部标签元素。在 head 元素中你可以插入脚本（scripts）, 样式文件（CSS），及各种meta信息。
可以添加在头部区域的元素标签为: &amp;lt;title&amp;gt;, &amp;lt;style&amp;gt;, &amp;lt;meta&amp;gt;, &amp;lt;link&amp;gt;, &amp;lt;script&amp;gt;, &amp;lt;noscript&amp;gt; 和 &amp;lt;base&amp;gt;。
&amp;lt;title&amp;gt; 标签定义了不同文档的标题。
&amp;lt;title&amp;gt; 在 HTML/XHTML 文档中是必须的。
段落 段落是通过 &amp;lt;p&amp;gt; 标签定义的
&amp;lt;p&amp;gt;这是一个段落 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;这是另一个段落&amp;lt;/p&amp;gt; 结束标签 &amp;lt;/p&amp;gt; 是块级元素 即使忘了使用结束标签，大多数浏览器也会正确地将 HTML 显示出来,但不要依赖这种做法。忘记使用结束标签会产生意想不到的结果和错误。
拆行 在不产生一个新段落的情况下进行换行（新行），使用 &amp;lt;br&amp;gt; 标签
&amp;lt;p&amp;gt;这个&amp;lt;br&amp;gt;段落&amp;lt;br&amp;gt;分行&amp;lt;/p&amp;gt; 元素是一个空的 HTML 元素。由于关闭标签没有任何意义，因此它没有结束标签。
HTML文档 &amp;lt;!doctype HTML&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;link rel=&amp;#34;shortcut icon&amp;#34; href=&amp;#34;图片url&amp;#34;&amp;gt; &amp;lt;title&amp;gt;这是一个带图片的标签&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; …… …… …… &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; </description>
    </item>
    
    <item>
      <title>Python中所使用的while、for循环</title>
      <link>https://www.ggood.xyz/post/python%E4%B8%AD%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84whilefor%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/python%E4%B8%AD%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84whilefor%E5%BE%AA%E7%8E%AF/</guid>
      <description>while循环语句 while 判断条件(condition)：  执行语句(statements)…… 当执行到while语句会判断其设定的条件，符合就会进入循环，直到判断其不符合才进入下一步程序。
for循环语句 for 循环可以遍历任何可迭代对象，如一个列表或者一个字符串。
for循环的一般格式如下：
for &amp;lt;variable&amp;gt; in &amp;lt;sequence&amp;gt;:  &amp;lt;statements&amp;gt; else:  &amp;lt;statements&amp;gt; 执行for循环，会遍历sequence中的内容，直至完成结束
&amp;gt;&amp;gt;&amp;gt;languages = [&amp;#34;C&amp;#34;, &amp;#34;C++&amp;#34;, &amp;#34;Perl&amp;#34;, &amp;#34;Python&amp;#34;] &amp;gt;&amp;gt;&amp;gt; for x in languages: ... print (x) ... C C++ Perl Python &amp;gt;&amp;gt;&amp;gt; </description>
    </item>
    
    <item>
      <title>Python的if else判断以及continue、break用法</title>
      <link>https://www.ggood.xyz/post/python%E7%9A%84if-else%E5%88%A4%E6%96%AD%E4%BB%A5%E5%8F%8Acontinuebreak%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/python%E7%9A%84if-else%E5%88%A4%E6%96%AD%E4%BB%A5%E5%8F%8Acontinuebreak%E7%94%A8%E6%B3%95/</guid>
      <description>if else语句 语句的意思是如果满足此条件则执行，否则执行另一个
 if (condition) {  当条件为 true 时执行的代码 } else {  当条件不为 true 时执行的代码 } 可嵌套使用，可以结合while、for循环使用
sites = [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;D&amp;#34;] for site in sites:  if site == &amp;#34;B&amp;#34;:  print(&amp;#34;B!&amp;#34;)  break  print(&amp;#34;循环数据 &amp;#34; + site) else:  print(&amp;#34;没有循环数据!&amp;#34;) print(&amp;#34;完成循环!&amp;#34;) continue、break用法 break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。
continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。
n = 5 while n &amp;gt; 0:  n -= 1  if n == 2:  break  print(n) print(&amp;#39;循环结束。&amp;#39;)  输出结果为：  4 3 循环结束。 n = 5 while n &amp;gt; 0:  n -= 1  if n == 2:  continue  print(n) print(&amp;#39;循环结束。&amp;#39;)   输出结果为：  4 3 1 0 循环结束。 </description>
    </item>
    
    <item>
      <title>前端的HTML的结构认识</title>
      <link>https://www.ggood.xyz/post/%E5%89%8D%E7%AB%AF%E7%9A%84html%E7%9A%84%E7%BB%93%E6%9E%84%E8%AE%A4%E8%AF%86/</link>
      <pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/%E5%89%8D%E7%AB%AF%E7%9A%84html%E7%9A%84%E7%BB%93%E6%9E%84%E8%AE%A4%E8%AF%86/</guid>
      <description>HTML HTML 指的是超文本标记语言: HyperText Markup Language HTML 不是一种编程语言，而是一种标记语言
HTML主要结构 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;!--这里主要是声名HTML的类型--&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;!--从这里开始包含HTML页面内容--&amp;gt;  &amp;lt;head&amp;gt; &amp;lt;!--头部结构，里面可以有title、meta、link等内容--&amp;gt;  &amp;lt;/head&amp;gt; &amp;lt;!--闭环head--&amp;gt;  &amp;lt;body&amp;gt; &amp;lt;!--主体，以下内容就是浏览器页面显示的东西--&amp;gt;  &amp;lt;/body&amp;gt; &amp;lt;!--闭环head--&amp;gt; &amp;lt;/html&amp;gt; &amp;lt;!--闭环HTML--&amp;gt; HTML基本上都是以层级嵌套的形式编写内容，每个标签都会有相应的开始结束头尾对应
&amp;lt;!DOCTYPE html&amp;gt; 声明为 HTML5 文档
&amp;lt;html&amp;gt; 元素是 HTML 页面的根元素
&amp;lt;head&amp;gt; 元素包含了文档的元（meta）数据，如 &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; 定义网页编码格式为 utf-8。
&amp;lt;body&amp;gt; 元素包含了可见的页面内容
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;!DOCTYPE&amp;gt; 声明有助于浏览器中正确显示网页。 网络上有很多不同的文件，如果能够正确声明HTML的版本，浏览器就能正确显示网页内容。</description>
    </item>
    
    <item>
      <title>1A2B猜数字游戏功能</title>
      <link>https://www.ggood.xyz/post/1a2b/</link>
      <pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/1a2b/</guid>
      <description>import random import argparse import re total=&amp;#39;0123456789&amp;#39;#全部数值 parser = argparse.ArgumentParser(description=&amp;#39;Set Answer&amp;#39;) parser.add_argument(&amp;#39;--mysetguess&amp;#39;, dest=&amp;#39;mysetguess&amp;#39;, type=str, help= &amp;#34;游戏者自己设定的答案&amp;#34;, required=False,choices=set(4)) args = parser.parse_args() print(args.mysetguess) print(&amp;#34;/*******************************猜数字游戏***********************************/&amp;#34;) print(&amp;#34;游戏规则：系统随机给出0-9的4位数字，您可以输入您猜测的4位数字，系统会比较并给予反馈，A表示数字对，且位置对，B表示数字对位置不对，如1A2B表示有1位您猜对了数字和位置，有2位您猜对数字，但位置不对。您总共有6次机会，加油哦！&amp;#34;)  if args.mysetguess==None:  answer = random.sample(total, 4)# 从total中随机获取4个不重复数 else:  answer = args.mysetguess  for guessTimes in range(6):#循环6次  guess = &amp;#34;&amp;#34;  for inputErros in range(3):#循环3次  guess=input(&amp;#34;请输入4位0-9的不重复数字：&amp;#34;)  if guess.isdigit()==True and len(guess)==4:#isdigit() 方法检测字符串是否只由数字组成且长度为4  guessSet=set(guess)#set() 函数创建一个无序不重复元素集  if len(guessSet)==4:##长度个数为4 and guessSet.isdisjoint(set()):#内容不与其他某个设置的值要不相交，相交false  break  else:  print(&amp;#34;您没有理解游戏规则，错误次数3次，游戏结束。&amp;#34;)  break  A=0  B=0  for j in range(4):  if guess[j]==answer[j]:  A+=1  else:  #for k in range(4):  #if guess[j]==answer[k]:  if guess[j] in answer:  B+=1  if A&amp;lt;4:  if guessTimes&amp;lt;5:  print(&amp;#34;%dA%dB，您还有%d次机会。&amp;#34; %(A,B,5-guessTimes))  else:  print(&amp;#34;很遗憾您没有猜对，答案是%s，再玩一局吧。&amp;#34; %(answer))  else:  print(&amp;#34;恭喜您猜对了！&amp;#34;)  break </description>
    </item>
    
    <item>
      <title>Python 猜数字小功能</title>
      <link>https://www.ggood.xyz/post/%E7%AE%80%E7%AE%80%E5%8D%95%E5%8D%95%E7%9A%84%E4%B8%80%E4%B8%AA%E7%8C%9C%E6%95%B0%E5%AD%97%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/%E7%AE%80%E7%AE%80%E5%8D%95%E5%8D%95%E7%9A%84%E4%B8%80%E4%B8%AA%E7%8C%9C%E6%95%B0%E5%AD%97%E5%8A%9F%E8%83%BD/</guid>
      <description>里面主要涉及到while，for循环，if..else判断 代码如下:
 fage = False  mage =False  bage=False  father_age = 42  mather_age=41  boy_age=15  print(&amp;#34;Let&amp;#39;s guess the age!&amp;#34;)  while fage == False: #当fage这个值等于False时，进入循环  guess_father =int(input(&amp;#39;\nyour guess father_age:&amp;#39;)) #输入你所猜测的父亲年龄  if guess_father == father_age:  print(&amp;#39;you right!\n&amp;#39;)  fage = True  else:  print(&amp;#39;\nyour is error!&amp;#39;)  if guess_father &amp;lt; father_age:  small = father_age - guess_father #当你猜测的数比答案小时，用答案减去猜测数等于相差数值  print(&amp;#39;maybe is small!differ:&amp;#39;, small)  elif guess_father &amp;gt; father_age:  big =guess_father - father_age  print(&amp;#39;maybe is big!</description>
    </item>
    
    <item>
      <title>Python 爬取内容转存 TXT</title>
      <link>https://www.ggood.xyz/post/%E7%88%AC%E5%8F%96%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99%E5%86%85%E5%AE%B9%E8%BD%AC%E5%AD%98%E6%96%87%E6%9C%AC/</link>
      <pubDate>Sat, 26 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/%E7%88%AC%E5%8F%96%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99%E5%86%85%E5%AE%B9%E8%BD%AC%E5%AD%98%E6%96%87%E6%9C%AC/</guid>
      <description>需要安装好Python环境，以下基于Python3实现，Windows10环境： 所需Python的拓展库,需要用到selenium库对网页元素进行操作；安装chrome浏览器，下载并解压相对应版本的谷歌驱动：
 from selenium import webdriver  import time  from selenium.webdriver.common.by import By  import os  from selenium.webdriver.chrome.options import Options #安装chrome，下载解压Chromediver 以下是主体部分:
 env_dist = os.environ # environ是在os.py中定义的一个dict environ = {}  usdtxt=env_dist.get(&amp;#39;usd_hlfile_path&amp;#39;)#环境变量usd_hlfile_path，存放usd汇率的路径下txt文本  print (usdtxt)  rmbtxt=env_dist.get(&amp;#39;rmb_hlfile_path&amp;#39;)#环境变量rmb_hlfile_path，存放rmb汇率的路径下txt文本  print (rmbtxt)  chromedriver =env_dist.get(&amp;#39;chromedriver_path&amp;#39;)#环境变量chromedriver_path，存放谷歌驱动的路径  print(chromedriver)   chrome_options = Options()  chrome_options.add_argument(&amp;#39;--no-sandbox&amp;#39;)  chrome_options.add_argument(&amp;#39;--disable-dev-shm-usage&amp;#39;)  chrome_options.add_argument(&amp;#39;--headless&amp;#39;)  driver = webdriver.Chrome(options=chrome_options)   #driver=webdriver.Chrome(executable_path=chromedriver)  driver.maximize_window()  driver.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://www.ggood.xyz/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://www.ggood.xyz/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://www.ggood.xyz/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://www.ggood.xyz/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/▾ images/logo.png should become
▾ &amp;lt;root&amp;gt;/▾ static/▾ images/logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.ggood.xyz/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.ggood.xyz/about/</guid>
      <description>There is nothing for the time being！</description>
    </item>
    
  </channel>
</rss>
